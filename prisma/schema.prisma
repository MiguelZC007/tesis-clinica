generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String    @id @default(uuid())
    fullname   String
    birthdate  DateTime
    cellphone  String?
    email      String    @unique
    ci         String    @unique
    address    String?
    active     Boolean   @default(true)
    password   String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    patient    Patient?  @relation(fields: [patientId], references: [id])
    employee   Employee? @relation(fields: [employeeId], references: [id])
    sessions   Session[]
    patientId  String?   @unique
    employeeId String?   @unique
}

model Session {
    id        String   @id @default(uuid())
    active    Boolean? @default(true)
    token     String?
    expireIn  String?
    browser   String?
    device    String?
    platform  String?
    version   String?
    os        String?
    source    String?
    origin    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Employee {
    id               String           @id @default(uuid())
    roles            Role[]
    hospital         Hospital         @relation(fields: [hospitalId], references: [id])
    hospitalId       String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    medicalHistories MedicalHistory[]
    appointments     Appointment[]
    invoices         Invoice[]
    users            User[]
    addendums        Addendum[]
}

model Hospital {
    id          String     @id @default(uuid())
    name        String     @unique
    description String?
    address     String
    phone       String
    email       String
    logo        Archive?   @relation(fields: [logoId], references: [id])
    logoId      String?    @unique
    active      Boolean    @default(true)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    employees   Employee[]
}

model Role {
    id          String     @id @default(uuid())
    name        String     @unique
    description String?
    active      Boolean    @default(true)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    employees   Employee[]
}

model Patient {
    id                   String           @id @default(uuid())
    familyMedicalHistory String[]
    surgicalHistory      String[]
    medicinesHistory     String[]
    socialHistory        String[]
    allergies            String[]
    bloodType            bloodType
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    medicalHistories     MedicalHistory[]
    appointments         Appointment[]
    invoices             Invoice[]
    users                User[]
}

model MedicalHistory {
    id           String       @id @default(uuid())
    patient      Patient      @relation(fields: [patientId], references: [id])
    patientId    String
    doctor       Employee     @relation(fields: [doctorId], references: [id])
    doctorId     String
    symptoms     String       @default("")
    physicalExam Json         @db.JsonB
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    vitalSign    VitalSign    @relation(fields: [vitalSignId], references: [id])
    vitalSignId  String       @unique
    diagnostics  Diagnostic[]
    Addendums    Addendum[]
}

model Addendum {
    id               String         @id @default(uuid())
    message          String
    doctor           Employee       @relation(fields: [doctorId], references: [id])
    doctorId         String
    active           Boolean        @default(true)
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    medicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [id])
    medicalHistoryId String
}

model Diagnostic {
    id               String         @id @default(uuid())
    name             String
    observation      String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    MedicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [id])
    medicalHistoryId String
    Treatments       Treatment[]
}

model Treatment {
    id          String       @id @default(uuid())
    description String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    diagnostics Diagnostic[]
    quantity    Int
    medicine    Medicine     @relation(fields: [medicineId], references: [id])
    medicineId  String
}

model Medicine {
    id                  String      @id @default(uuid())
    comercialName       String
    genericName         String
    description         String?
    recomendations      String[]
    therapeuticCategory String?
    activeIngredients   String[]
    pharmaceuticalForm  String?
    dosage              String?
    contraindications   String[]
    manufacturer        String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    Treatment           Treatment[]
}

model VitalSign {
    id                 String           @id @default(uuid())
    description        String           @default("")
    oxygenSaturation   String           @default("")
    systolicPressure   String           @default("")
    heartRate          String           @default("")
    breathingFrequency String           @default("")
    diastolicPressure  String           @default("")
    temperature        Decimal          @default(0.0) @db.Decimal(99, 2)
    weight             Decimal          @default(0.0) @db.Decimal(99, 2)
    height             Decimal          @default(0.0) @db.Decimal(99, 2)
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    MedicalHistory     MedicalHistory[]
}

model Product {
    id            String              @id @default(uuid())
    name          String
    description   String?
    price         Decimal             @default(0.0) @db.Decimal(99, 2)
    programable   Boolean             @default(false)
    active        Boolean             @default(true)
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
    category      ProductCategory     @relation(fields: [categoryId], references: [id])
    categoryId    String
    subCategory   ProductSubCategory? @relation(fields: [subCategoryId], references: [id])
    subCategoryId String?
    details       Detail[]
}

model ProductCategory {
    id            String               @id @default(uuid())
    name          String
    description   String?
    programable   Boolean              @default(false)
    active        Boolean              @default(true)
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt
    subCategories ProductSubCategory[]
    Product       Product[]
}

model ProductSubCategory {
    id                String          @id @default(uuid())
    name              String
    description       String?
    active            Boolean         @default(true)
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    products          Product[]
    productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
    productCategoryId String
}

model Appointment {
    id          String    @id @default(uuid())
    from        DateTime
    to          DateTime
    description String?
    remember    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    patient     Patient   @relation(fields: [patientId], references: [id])
    patientId   String
    doctor      Employee  @relation(fields: [doctorId], references: [id])
    doctorId    String
    invoices    Invoice[]
}

model Invoice {
    id            String       @id @default(uuid())
    nit           String?
    patient       Patient      @relation(fields: [patientId], references: [id])
    cashier       Employee     @relation(fields: [employeeId], references: [id])
    description   String?
    total         Decimal      @default(0.0) @db.Decimal(99, 2)
    totalDiscount Decimal      @default(0.0) @db.Decimal(99, 2)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    details       Detail[]
    appointment   Appointment? @relation(fields: [appointmentId], references: [id])
    appointmentId String?
    patientId     String
    employeeId    String
}

model Detail {
    id          String   @id @default(uuid())
    price       Decimal  @default(0.0) @db.Decimal(99, 2)
    discount    Decimal  @default(0.0) @db.Decimal(99, 2)
    subTotal    Decimal  @default(0.0) @db.Decimal(99, 2)
    quantity    Int      @default(1)
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    invoice     Invoice  @relation(fields: [invoiceId], references: [id])
    invoiceId   String
    product     Product  @relation(fields: [productId], references: [id])
    productId   String
}

model Archive {
    id        String     @id @default(uuid())
    name      String
    url       String
    etag      String
    key       String
    versionId String
    x80       Json       @db.JsonB
    x200      Json       @db.JsonB
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Hospital  Hospital[]
}

enum bloodType {
    A_POSITIVE
    A_NEGATIVE
    B_POSITIVE
    B_NEGATIVE
    AB_POSITIVE
    AB_NEGATIVE
    O_POSITIVE
    O_NEGATIVE
}
